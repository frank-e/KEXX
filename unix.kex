'set novalue on'  /* force KEXX and its way of SIGNAL ON NOVALUE  */

/* Usage:         [MACRO] UNIX [file [ ( init-options [)] ]]      */
/* Or:            KEDIT file (PROFile UNIX [init-options[)]]      */
/* Example:       UNIX file                  use UNIX settings    */
/*                UNIX                       reload current file  */
/* Purpose:       UNIX is for odd files not automatically handled */
/*                correctly by your PROFILE settings.  UNIX sets: */
/*                TABSIN  OFF => TAB not automatically expanded   */
/*                TABSOUT OFF => TAB not automatically compressed */
/*                EOLIN  LF   => LF or CRLF handled as line ends  */
/*                EOLOUT LF   => line end saved as single LF      */
/*                EOFOUT EOL  => last line end like all line ends */
/*                EOFIN ALLOW => ASCII SUB ^Z not handled as EOF  */
/*                TRAILING ON => spaces before line end preserved */
/* See also:      Macro A-F12 in INITIAL.KML toggles normal and   */
/*                binary views.  Normal view would also reset all */
/*                UNIX settings to the normal defprof.1() values. */
/*                For the "reload strategy" used by UNIX.KEX see  */
/*                also BINARY, BROWSE, HEXA, or HEXE.KEX.   This  */
/*                macro automatically uses PROFDEBUG if "DEFINEd" */
/*                by TRACE.KEX for debugging.                     */
/* Position:      The actual position in the file is preserved if */
/*                possible.  This fails if an intended EOLOUT LF  */
/*                or CRLF does not reflect the actually used EOL  */
/*                character(s) for files not yet saved with this  */
/*                intended EOLOUT.  The EOLIN value does not help */
/*                in this scenario, EOLIN LF in essence means LF  */
/*                or CRLF.  File positions depending on EOFIN and */
/*                EOFOUT also cannot be accurately preserved, but */
/*                affect only the last line or record.  Likewise  */
/*                TABSIN, TABSOUT, or TRAILING can confuse binary */
/*                offsets.  Function length.1() correctly counts  */
/*                trailing blanks only for TRAILING ON.           */
/* Optional:      INITIAL.KML and one of COLOR, MONO, WINDOWS.KEX */
/*                depending on monitor.1() can be used for other  */
/*                settings (colours, keys, etc.) not conflicting  */
/*                with the UNIX settings.  STATUS.KEX reports the */
/*                relevant non-default settings (if available).   */
/* Requires:      Kedit 5.0 or KeditW 1.0 (Frank Ellermann, 2008) */

   if profile()      then  exit EDIT() ;  else  PROF = INIT()

   if arg( 1 ) <> '' then  do       /* accept one file + options: */
      Q = left( strip( arg( 1 )), 1 )
      if Q = '"' | Q = "'" then  parse arg (Q) FILE (Q) Q '(' R
                           else  parse arg     FILE     Q '(' R
      parse var R OPTS ')' R           ;  R = length( strip( Q R ))
      if R + pos( 'PROF', translate( OPTS )) > 0   then  do
         'emsg UNIX' arg( 1 ) '?!?'    ;  exit 20
      end                           /* avoid PROF-option conflict */
      'kedit "' || strip( FILE ) || '" (PROFile' PROF OPTS || ')'
      exit rc                       /* anything else done as PROF */
   end                              /* -------------------------- */

   'extract /FEXT/FILEID'
   if dir() | alt()  then  do       /* cannot reload changed file */
      'emsg save' FILEID.1 'first, UNIX has to reload this file'
      'cmsg save'                      ;  exit 12
   end
   if FEXT.1 = 'BAK' then  'fext TMP'  ;  else  'fext BAK'
   if rc <> 0        then  exit rc     ;  FILEID.0 = fileid.1()
   Q = eolout.1() <> 'NONE'         /* text EOL at length.1() + 1 */
   Q = max( 0, -1 + min( column.1(), Q + length.1()))
   R = max( 0, -1 + min(   line.1(),       size.1()))
   if eolout.1() = 'NONE'           /* position or binary offset: */
      then Q = R * lrecl.1() + Q    /* binary offsets start at 0, */
      else Q = ( R + 1 ) ( Q + 1 )  /* but positions start at 1 1 */

   'kedit "' || FILEID.1 || '" (PROFile' PROF || ')'
   if rc <> 0  then  do             /* trouble: reset old fileid  */
      R = rc      ;  'fext' FEXT.2     ;  exit R
   end
   'kedit "' || FILEID.0 || '" (NEW)'  ;  'quit'
   'kedit "' || FILEID.1 || '" (NEW)'  ;  'locate :1'
   if datatype( Q, 'w' )   then  do
      do until Q < 0 | rc <> 0
         R = length.1() + 2 - ( 'CRLF' <> eolout.1())
         Q = Q - R                     ;  'next'
      end
      Q = ( line.1() - 1 ) ( Q + R + 1 )
   end
   'locate :' || word( Q, 1 ) 'clocate :' || word( Q, 2 )
   exit 0

EDIT: procedure   /* -------------------------------------------- */
   if initial()   then  do          /* initialize global settings */
      'nomsg define initial.kml'       ;  'nomsg macro' monitor.1()
   end
   if version.1() = 'KEDIT'   then  'scr 1'
                              else  'win max'
   'nomsg editv get HEXE.0'
   if HEXE.0 = '' then  do          /* save local settings HEXE.n */
      'reprof on' ;  'wrap on'         ;  'arrow off'
      'shifts on' ;  'arbchar on'      ;  'backup temp'
      'number on' ;  'hexdisp on'      ;  'varblank on'
      call INIT   ;  'editv get HEXE.0'
   end
   do N = 1 to HEXE.0               /* load local settings HEXE.n */
      'editv get HEXE.' || N           ;  'set' HEXE.N
   end            /* -------------------------------------------- */

   if version.1() <> 'KEDIT'  then  do
      'translatein none'               ;  'translateout none'
   end
   'eofin allow'  ;  'eolin  lf'       ;  'tabsin  off'
   'eofout eol'   ;  'eolout lf'       ;  'tabsout off'
   'trailing on'  ;  'beep on'         ;  'nomsg macro status'
   if 0 <= rc  then  'macro status'    ;  return 0

INIT: procedure   /* -------------------------------------------- */
   SET = 'attr arbchar arrow backup number undoing varblank wrap'
   if version.1() <> 'KEDIT'  then  do
      if toolset.2() = 'USER' then  SET = SET 'toolset'
   end

   HEXE.0 = words( SET )               ;  'editv put HEXE.0'
   do N = 1 to HEXE.0
      'nomsg query' word( SET, N )     ;  HEXE.N = lastmsg.1()
      'editv put HEXE.' || N
   end

   parse source . . PROF               ;  'nomsg query macro' PROF
   if rc <> 0  then  return PROF       ;  return PROF 'PROFDEBUG'
