'set novalue on'  /* force KEXX and its way of SIGNAL ON NOVALUE  */

/* Usage:         [MACRO] XD file                                 */
/*                KEDIT file (PROF XD)                            */
/* Purpose:       Update a list of files in the given file with   */
/*                the actual timestamps and sizes.  These listed  */
/*                files have to exist in the directory of the     */
/*                edited file.  Listed files are identified by a  */
/*                line in the form yyyy-mm-dd size file comment,  */
/*                where size can end with ' KB' for sizes above   */
/*                99999 bytes.                                    */
/*                XD quits the updated and saved (or unmodified)  */
/*                file if it was used as initial profile.  This   */
/*                allows 'KEDIT file (PROF XD)' in a makefile or  */
/*                script.                                         */
/* Known issues:  Macro XD fails when it tries to resolve a long  */
/*                file name in DOS KEDIT 5 or KeditW 1.0 without  */
/*                long file name support.  Macro XD translates    */
/*                &amp; to & in listed file names (assuming XML). */
/* Background:    The initial handling up to procedure INIT() is  */
/*                in essence a copy of macro UNIX.KEX using the   */
/*                same concepts as in BINARY, BROWSE, HEXA, HEXE, */
/*                and UNIX.KEX.                                   */
/* See also:      <http://purl.net/xyzzy/kex/unix.kex>            */
/* Requires:      Kedit 5.0 or KeditW 1.0 (Frank Ellermann, 2010) */


   if profile()      then  exit EDIT() ;  else  PROF = INIT()

   if arg( 1 ) <> '' then  do       /* accept one file + options: */
      Q = left( strip( arg( 1 )), 1 )
      if Q = '"' | Q = "'" then  parse arg (Q) FILE (Q) Q '(' R
                           else  parse arg     FILE     Q '(' R
      parse var R OPTS ')' R           ;  R = length( strip( Q R ))
      if R + pos( 'PROF', translate( OPTS )) > 0   then  do
         'emsg XD' arg( 1 ) '?!?'      ;  exit 20
      end                           /* avoid PROF-option conflict */
      'kedit "' || strip( FILE ) || '" (PROFile' PROF OPTS || ')'
      exit rc                       /* anything else done as PROF */
   end                              /* -------------------------- */

   'extract /FEXT/FILEID'
   if dir() | alt()  then  do       /* cannot reload changed file */
      'emsg save' FILEID.1 'first, XD has to reload this file'
      'cmsg save'                      ;  exit 12
   end
   if FEXT.1 = 'BAK' then  'fext TMP'  ;  else  'fext BAK'
   if rc <> 0        then  exit rc     ;  FILEID.0 = fileid.1()
   Q = eolout.1() <> 'NONE'         /* text EOL at length.1() + 1 */
   Q = max( 0, -1 + min( column.1(), Q + length.1()))
   R = max( 0, -1 + min(   line.1(),       size.1()))
   if eolout.1() = 'NONE'           /* position or binary offset: */
      then Q = R * lrecl.1() + Q    /* binary offsets start at 0, */
      else Q = ( R + 1 ) ( Q + 1 )  /* but positions start at 1 1 */

   'kedit "' || FILEID.1 || '" (PROFile' PROF || ')'
   if rc <> 0  then  do             /* trouble: reset old fileid  */
      R = rc      ;  'fext' FEXT.2     ;  exit R
   end
   'kedit "' || FILEID.0 || '" (NEW)'  ;  'quit'
   'kedit "' || FILEID.1 || '" (NEW)'  ;  'locate :1'
   if datatype( Q, 'w' )   then  do
      do until Q < 0 | rc <> 0
         R = length.1() + 2 - ( 'CRLF' <> eolout.1())
         Q = Q - R                     ;  'next'
      end
      Q = ( line.1() - 1 ) ( Q + R + 1 )
   end
   'locate :' || word( Q, 1 ) 'clocate :' || word( Q, 2 )
   exit 0

EDIT: procedure   /* -------------------------------------------- */
   if initial()   then  do          /* initialize global settings */
      'nomsg define initial.kml'       ;  'nomsg macro' monitor.1()
   end
   if version.1() = 'KEDIT'   then  'scr 1'
                              else  'win max'
   'nomsg editv get HEXE.0'
   if HEXE.0 = '' then  do          /* save local settings HEXE.n */
      'reprof on' ;  'wrap on'         ;  'arrow off'
      'shifts on' ;  'arbchar on'      ;  'backup temp'
      'number on' ;  'hexdisp on'      ;  'varblank on'
      call INIT   ;  'editv get HEXE.0'
   end
   do N = 1 to HEXE.0               /* load local settings HEXE.n */
      'editv get HEXE.' || N           ;  'set' HEXE.N
   end            /* -------------------------------------------- */

   if version.1() <> 'KEDIT'  then  do
      'translatein none'               ;  'translateout none'
   end
   'eofin allow'  ;  'eolin  lf'       ;  'tabsin  off'
   'eofout eol'   ;  'eolout lf'       ;  'tabsout off'
   'trailing on'  ;  'beep on'         ;  return XDAT()

INIT: procedure   /* -------------------------------------------- */
   'nomsg query attr'      ;  HEXE.1 = lastmsg.1()
   'nomsg query arbchar'   ;  HEXE.2 = lastmsg.1()
   'nomsg query arrow'     ;  HEXE.3 = lastmsg.1()
   'nomsg query backup'    ;  HEXE.4 = lastmsg.1()
   'nomsg query number'    ;  HEXE.5 = lastmsg.1()
   'nomsg query undoing'   ;  HEXE.6 = lastmsg.1()
   'nomsg query varblank'  ;  HEXE.7 = lastmsg.1()
   'nomsg query wrap'      ;  HEXE.8 = lastmsg.1()
                              HEXE.0 = 8
   do N = 0 to HEXE.0      ;  'editv put HEXE.' || N  ;  end

   parse source . . PROF               ;  'nomsg query macro' PROF
   if rc <> 0  then  return PROF       ;  return PROF 'PROFDEBUG'

XDAT: procedure   /* -------------------------------------------- */
   'extract /ARBCHAR/DIRFORM/STAY/WRAP/'
   'arbchar on $ ?'        ;  'wrap off'
   'stay off'              ;  ':0 tfind' delimit( '????-??-?? ' )
   'dirformat' DIRFORMAT.1 DIRFORMAT.2 4

   PATH = fm.1() || fp.1() ;  OFFS = DIRFORMAT.1 + DIRFORMAT.2 + 5
   if right( PATH, 1 ) <> '\' then  PATH = PATH || '\'

   do while focuseof() = 0
      parse value curline.3() with Y '-' M '-' D SIZE FILE MD5
      if datatype( Y || M || D, 'w' )  then  do until 1
         if abbrev( FILE, 'KB ' )   then  do
            SIZE = SIZE 'KB'
            parse value SIZE FILE MD5 with (SIZE) FILE MD5
         end
         LS = pos( SIZE, curline.3(), 12 ) + length( SIZE )

         'nomsg dir "' || PATH || UNCR( FILE ) || '"'
         if rc <> 0  then  leave    /* cannot update missing file */

         ':1'              ;  RR = substr( curline.3(), OFFS )
         'quit'            ;  parse var RR SIZE RR .

         if length( RR ) = 9  then  RR = 0 || RR
         if substr( RR, 3, 1 ) = '.'   then  do
            parse var RR D '.' M '.' Y
            RR = Y || '-' || M || '-' || D
         end

         M = strip( MD5 )  ;  parse var MD5 D (M)
         Y = verify( M, '0123456789abcdef' ) < ( 32 = length( M ))
         if Y  then  do
            'x "' || PATH || fn.1() || '.md5" (NOPROF)'
            'locate' delimit( '*' || FILE )
            parse value curline.3() with M .
            'quit'         ;  MD5 = D || M
         end

         if SIZE > 99999   then  SIZE = ( SIZE + 1023 ) % 1024 'KB'
         LINE = RR right( SIZE, LS - 12 )
         LS = pos( FILE, curline.3())
         LINE = left( LINE, LS - 2 ) FILE MD5
         if LINE <> curline.3()  then  'replace' LINE
      end
      'nomsg tfind' delimit( '????-??-?? ' )
   end

   if alt() then  do
      'up 2'               ;  LINE = curline.3()
      if abbrev( strip( LINE ), 'Last update: ' )  then  do
         parse var LINE LINE 'Last update:' . . . . LS
         LINE = LINE 'Last update:' date() time( 'H' ) || ':00' LS
         'replace' LINE
      end
      'save'               ;  say 'File updated and saved'
   end

   'dirformat' DIRFORMAT.1 DIRFORMAT.2 DIRFORMAT.3
   'stay' STAY.1           ;  'arb' ARBCHAR.1 ARBCHAR.2 ARBCHAR.3
   'wrap' WRAP.1           ;  if initial()   then  'quit'
   return 0

UNCR: procedure   /* -------------------------------------------- */
   parse arg SRC           ;  DST = '' ;  POS = pos( '&amp;', SRC )
   do while POS > 0
      DST = DST || left( SRC, POS -1 ) || '&'
      SRC =      substr( SRC, POS +5 ) ;  POS = pos( '&amp;', SRC )
   end
   return DST || SRC

