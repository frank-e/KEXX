'set novalue on'  /* force KEXX and its way of SIGNAL ON NOVALUE  */

/* Usage:         [MACRO] ZIP                                     */
/* Example:       ZIP                                             */
/* Option:        KEDIT DIR (PROF ZIP)                            */
/*                KEDITW DIR (PROF ZIP.KEX INSTANCE MULTIPLE)     */
/* Purpose:       Add ZIP related manuals to the ring.            */
/*                Updated 2008 for NT and renamed ZIP text files. */
/* Installation:  Configure directory DOCS with the ZIP manuals   */
/*                for your box, this macro is mostly an example.  */
/*                For similar applications create a shell script  */
/*                using a similar macro as profile, for example:  */
/*                   KEDITW DIR (PROF ZIP.KEX INSTANCE MULTIPLE)  */
/* Operation:     The idea is to quit all edited manuals with a   */
/*                single key A-F4.  KeditW needs WIN CLOSE FRAME  */
/*                for this purpose, and a "smart" macro F3 could  */
/*                handle this.                                    */
/* Requires:      Kedit 5.0 or KeditW 1.0, and the INFOZIP files  */
/*                                        (Frank Ellermann, 2000) */

if initial() then 'macro' defprof.1()  /* process normal PROFILE  */
if initial() then HERE = fileid.1() ;  else HERE = ring.0()

DOCS = 'D:\progra~1\bin\infozip\read.me\'
'dir "' || DOCS || 'unzip*.txt"'    ;  call EDIT DOCS || 'unzip.txt'
call EDIT  DOCS || 'zipinfo.txt'    ;  call SHOW DOCS || 'zip*.txt'
call SHOW  DOCS || 'funzip.txt'     ;  call EDIT DOCS || 'zip.txt'
call EDIT  DOCS || 'funzip.txt'     ;  call SHOW DOCS || 'read*.txt'

/* no editing needed below this line, or at least that's the plan */
   parse source . . MY                 /* assume F3 is smart QUIT */
   if datatype( HERE, 'w' ) = 0  then  do
      'define A-f4 "cancel" ; "dir" ; "macro F3"'
      'x "' || HERE || '"'          ;  say 'ALT-F4: quit' MY 'files'
   end
   else say 'editing' ring.0() - HERE MY 'files'

   ':0 forward half'                ;  exit rc

SHOW: procedure                        /* show = add file to DIR  */
   'dirap "' || arg( 1 ) || '"'     ;  RX = rc
   if rc <> 0 then do                  /* error msg still visible */
      ALERT.1 = delimit( arg( 1 ))  ;  parse source . . ALERT.2
      ALERT.2 = delimit( ALERT.2 'file error for:' )
      'alert' ALERT.1 'title' ALERT.2 'OKCANCEL'
      if ALERT.2 <> 'OK' then exit RX
   end
   return RX

EDIT: procedure                        /* edit = add file to ring */
   'x "' || arg( 1 ) || '" (nodefext)'
   if rc = 0 & size.1() = 0 then do
      if ring.0() > 1 then 'quit'   ;  rc = 1
   end                              ;  RX = rc
   if rc <> 0 then do                  /* error msg still visible */
      ALERT.1 = delimit( arg( 1 ))  ;  parse source . . ALERT.2
      ALERT.0 = delimit( ALERT.2 'edit error for:' )
      'alert' ALERT.1 'title' ALERT.2 'OKCANCEL'
      if ALERT.2 <> 'OK' then exit RX
   end
   return RX
